---- nexus_wide_project_management_style_guide ----

    1. All NexusWide project repositories MUST contain a 'docs' directory.

    2. All NexusWide project repositories MUST have a 'README.md' file
        - that follows the Markdown formatting and style guidelines.

    3. All NexusWide project repositories MUST contain a 'Security Policy' file.

    4. All of the following segments: 'Security Policies', 'Code of Conduct', 'Contributing Guidelines', and 'Terms of Service'
        - MUST be located within the 'docs' directory.

    5. Only the 'License' file is permitted to be located in the main directory of the repository.

    6. All NexusWide_owned repositories MUST be licensed under ( Creative Commons Zero v1.0 Universal ).

    7. force_commits are not allowed in NexusWide repositories.

    8. All versions of the project repository MUST be controlled under semantic ( 'https://semver.org/' ).

    9. The version numbering of the project MUST be split into two phases: ( pre_release phase, release phase ).

    10. During the pre_release phase all changes in the development process are a part of the version numbering.

    11. During the release phase, only the user_side features are a part of the version numbering.

    12. When a project reaches the release phase, a ( changelog.md ) file MUST be implemented in the repository ( docs ) directory.

    13. The release phase version numbering is only mentioned in ( the changelog.md ) file.

    14. release versioning and development versioning are seperate concepts,
        - do not attempt to increment the release version number while proposing updates to the
        - back_end segment of the projects.

    15. Local branches MUST have their name set as the part of the API they are going to affect;
        - ( e.x: documentations ) .

    16. Contributors MUST always create a pull request and branch before attempting to make their local changes and submit an update.

    17. Remote branches MUST be deleted after they have been merged into the master ( Main.Project ) branch in any form.

    18. Pull requests MUST NOT contain a to_do list, as that would make the existence of issues purposeless.

    19. Pull request titles MUST refer to the fix, feat or MAJOR change commit message which is expected to be the outcome after all the issue to_dos are finished.

    20 the convention of naming pull requests is the same as commit messages.

    21. All pull requests MUST have at least one comment before being merged.

    22. Contributors MUST NOT directly list any of the ( fix ) or ( feat ) changes in the description comment of a pull request
        - They MUST be self_explanatory in the commit messages.

    23. All pull reqeusts MUST contain a well_formatted description comment.

    24. The pull_request description comment MUST always be the first comment.

    25. The pull_request description comment MUST start with a header containing the update name tag
        - ( this is not the same as the pull_request title, it is any name tag that you would want to assign )
        - followed by the version number.
        - ( e.x: documentation changes description header would be: ( UDock | 1.0.0  ) ) .

    26. The pull_request description comment MUST contain four sections:
        - What has changed ( API changes ).
        - What were the reasons behind the changes.
        - What results are expected.
        - Which issue notes are affected by this update

    27. The 'signed off by' section MUST be the last section of the description comment and refer to the contributors who parted in the update.

    28. Issue references in pull requests MUST follow the following format:
        - ( Issue Note | { Issue Number } ).

    29. If a update has been rejected or/and left undone, The branch related to the update MUST be deleted, the pull_request
        - MUST be closed and labled as 'rejected'
        - ( The description comment MUST stay as is ).

    30. All code MUST be reformatted and pass all the tests given by the GitHub Actions before being merged
        - ( excluding txt or documentation files )

    31. Issues naming conventions MUST follow the corressondig regular expression:
        - (  { Issue Title } | { Issue numeral count } ),
        - ( e.x: problem(docs): remove harsh rules | 3 ) .

    32. The issue __details__ comment MUST be formatted by the following topics:
        - What is the assignment?
        - What are the steps to accomplish?
        - Why is this fixture necessary?
        - What is the expected outcome?

    33. The issue __details__ comment MUST contain a contributor name at its last section,
        - in order to asign the contributor to the cited task.

    33. All issues MUST contain at least 1 comment.

    34. The first comment of an issue MUST be the __details__ comment.

    35. Push changes as often as possible, all the changes to the project ( including the ones that are rejected or/and aborted ) MUST be recorded.

    36. All suspended projects ( those that don't receive any new update for a designated period of time ) MUST be archived and followed by
        - a note text at the tail of their README file, elucidating the fact that the project have been archived.

    37. The Git commit messages are formatted by the https://www.conventionalcommits.org/en/v1.0.0/ conventions.

    38. Git commits MUST be as small and independent as possible, do not concatenate two possible commits together
        - ( e.x: ( fix(docs): refactor grammar and add header ruleset ) is a bad commit message ) .

    39. All Git commit messages MUST have their branch name and the commit number
        - ( the number of times that the contributor have committed to this branch ) as their footer
        - ( e.x: ( style_guide: 3 ) ).

    40. In the context of combining branches, use merge instead of rebase.

    41. While performing any type of merging operation, adhere to the same guidelines as commit messages and provide the reason behind the merge
         - ( e.x: fetch(merge): fix conflict with origin main.project ) .

    42. All remote repository merge messages MUST be the same as the title of their pull_request.

    43. All remote repository merge messages MUST have the URL of their pull request at their description section.

    44. All remote repository merge messages MUST have the 'merge' pseudo-environment count as their footer:
        - ( e.x: ( merge: 4 ) ).

    45. All NexusWide repositories MUST have a Kanban board derived from the NexusWide main Kanban board template.

    54. The NexusWide Kanban board ( Ready, In Progress, In Review ) columns MUST be limited to one card only.
            - ( Only one update topic is allowed to be published at a time. )

    55. NexusWide Kanban board ( Wont Fix, Backlog, Done ) columns MUST NOT introduce any card amount limitation.
        - ( Ideas must be always cheap to introduce  ).

    56. All NexusWide card items must be converted to issues when they reach the ( In Progress ) state.
    49. All NexusWide Kanban card items MUST be assigned a start date.

    50. All NexusWide Kanban card items MUST be assigned a due date.

    51. All NexusWide Kanban card items MUST be assigned to a contributor ( assignee ).

    50. All NexusWide Kanban card names MUST adhere to the NexusWide Git commit message guidelines.

    51. All NexusWide Kanban card names MUST be the name of the issue which is going to be produced

    52. All NexusWide Kanban cards MUST have a description section aligned.

    53. All NexusWide Kanban card description formattings MUST be the same as the issue __details__ comment formatting guidelines.
    49. All NexusWide Kanban card items MUST be assigned a start date.
    50. All NexusWide Kanban card items MUST be assigned a due date.
    51. All NexusWide Kanban card items MUST be assigned to a contributor ( assignee ).
    47. All NexusWide Kanban card items MUST be prioritized and labeled based on the tags offered by the NexusWide main Kanban template.

    48. All NexusWide Kanban card items MUST be measured in size and labeled based on the tags offered by the NexusWide main Kanban template.


---- END ----
